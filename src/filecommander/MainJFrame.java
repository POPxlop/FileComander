package filecommander;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 * Класс главного окна
 */
public class MainJFrame extends javax.swing.JFrame {

    /**
     * Перечисление панелей
     */
    enum CommanderPanel {
        LEFT, RIGHT
    }

    /**
     * Таблица левой панели
     */
    private final DefaultTableModel tableModelLeft;

    /**
     * Таблица правой панели
     */
    private final DefaultTableModel tableModelRight;

    /**
     * Папка в левой панели
     */
    private File folderLeft = null;

    /**
     * Папка в правой панели
     */
    private File folderRight = null;

    /**
     * Creates new form MainJFrame
     */
    public MainJFrame() {
        initComponents();
        tableModelLeft = (DefaultTableModel) jTable1.getModel();
        tableModelRight = (DefaultTableModel) jTable2.getModel();
        jLabelLeftFolder.setText("-");
        jLabelRightFolder.setText("-");
        jLabelLeftName.setText("-");
        jLabelRightName.setText("-");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelLeft = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabelLeftName = new javax.swing.JLabel();
        jLabelLeftFolder = new javax.swing.JLabel();
        jPanelRight = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabelRightName = new javax.swing.JLabel();
        jLabelRightFolder = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("File Commander");
        setMinimumSize(new java.awt.Dimension(429, 348));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jPanelLeft.setPreferredSize(new java.awt.Dimension(350, 449));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Файл", "Размер"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setColumnSelectionAllowed(true);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        jTable1.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(1).setMinWidth(100);
            jTable1.getColumnModel().getColumn(1).setMaxWidth(100);
        }

        jPanel2.setMaximumSize(new java.awt.Dimension(32767, 43));
        jPanel2.setMinimumSize(new java.awt.Dimension(100, 43));
        jPanel2.setPreferredSize(new java.awt.Dimension(0, 43));

        jLabelLeftName.setText("jLabel1");

        jLabelLeftFolder.setText("jLabel1");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelLeftFolder, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelLeftName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelLeftName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelLeftFolder)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabelLeftFolder.getAccessibleContext().setAccessibleDescription("");
        jLabelLeftFolder.getAccessibleContext().setAccessibleParent(jPanel2);

        javax.swing.GroupLayout jPanelLeftLayout = new javax.swing.GroupLayout(jPanelLeft);
        jPanelLeft.setLayout(jPanelLeftLayout);
        jPanelLeftLayout.setHorizontalGroup(
            jPanelLeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelLeftLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelLeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 264, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 264, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanelLeftLayout.setVerticalGroup(
            jPanelLeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelLeftLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanelRight.setPreferredSize(new java.awt.Dimension(350, 449));

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Файл", "Размер"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable2MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable2);
        jTable2.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (jTable2.getColumnModel().getColumnCount() > 0) {
            jTable2.getColumnModel().getColumn(1).setMinWidth(100);
            jTable2.getColumnModel().getColumn(1).setMaxWidth(100);
        }

        jPanel1.setMaximumSize(new java.awt.Dimension(32767, 43));
        jPanel1.setMinimumSize(new java.awt.Dimension(100, 43));

        jLabelRightName.setText("jLabel1");

        jLabelRightFolder.setText("jLabel1");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelRightName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelRightFolder, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelRightName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelRightFolder)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabelRightFolder.getAccessibleContext().setAccessibleParent(jPanel1);

        jButton3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jButton3.setText("<");
        jButton3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jButton3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jButton4.setText(">");
        jButton4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jButton4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelRightLayout = new javax.swing.GroupLayout(jPanelRight);
        jPanelRight.setLayout(jPanelRightLayout);
        jPanelRightLayout.setHorizontalGroup(
            jPanelRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelRightLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 269, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanelRightLayout.setVerticalGroup(
            jPanelRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelRightLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 245, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanelRightLayout.createSequentialGroup()
                .addGap(145, 145, 145)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jMenu1.setText("Файл");

        jMenuItem1.setText("Выход");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Справка");

        jMenuItem2.setText("Помощь");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelLeft, javax.swing.GroupLayout.DEFAULT_SIZE, 276, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanelRight, javax.swing.GroupLayout.DEFAULT_SIZE, 316, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelRight, javax.swing.GroupLayout.DEFAULT_SIZE, 313, Short.MAX_VALUE)
                    .addComponent(jPanelLeft, javax.swing.GroupLayout.DEFAULT_SIZE, 313, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Преобразовать размер файла
     *
     * @param file Файл
     * @return Строка с размером файла
     */
    private String convertToMegabytes(File file) {
        long l = file.length();
        if (l > 999) {
            l /= 1024;
            if (l > 999) {
                l /= 1024;
                if (l > 999) {
                    l /= 1024;
                    return l + "gb";
                } else {
                    return l + "mb";
                }
            } else {
                return l + "kb";
            }
        } else {
            return "" + l;
        }
    }

    /**
     * Заполнить панель
     *
     * @param panel Панель
     */
    private void FillPanel(CommanderPanel panel) {
        // Таблица
        DefaultTableModel tableModel = tableModelRight;
        // Текущая папка
        File folder = folderRight;
        // Имя текущей папки
        javax.swing.JLabel label = jLabelRightFolder;
        if (panel == CommanderPanel.LEFT) {
            tableModel = tableModelLeft;
            folder = folderLeft;
            label = jLabelLeftFolder;
        }
        String folderName = "-";
        File[] listOfFiles;
        // Очистка таблицы
        tableModel.setRowCount(0);
        // Если текущая это корень дисков
        if (folder == null) {
            listOfFiles = File.listRoots();
        } else {// выбрана папка
            folderName = folder.getAbsolutePath();
            tableModel.addRow(new Object[]{"...", ""});
            listOfFiles = folder.listFiles();
        }
        // Если в папке нет файлов
        if (listOfFiles == null) {
            label.setText(folderName);
            return;
        }
        // Вывод файлов и папок текущей папки в таблицу
        for (File file : listOfFiles) {
            if (file.isFile()) {
                tableModel.addRow(new Object[]{
                    file.getName(), convertToMegabytes(file)});
            } else if (file.getName().equals("")) {
                tableModel.addRow(new Object[]{
                    file.toString(), ""});
            } else {
                tableModel.addRow(new Object[]{
                    file.getName(), ""});
            }
        }
        label.setText(folderName);
    }

    /**
     * Меню Выход
     *
     * @param evt
     */
    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        Object[] options = {"Да", "Нет"};
        int n = JOptionPane.showOptionDialog(this,
                "Закрыть File Commander?",
                "Выход", JOptionPane.OK_CANCEL_OPTION,
                JOptionPane.QUESTION_MESSAGE, null,
                options, options[1]);
        // Выбрано Да
        if (n == 0)
            this.dispose();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    /**
     * Окно загрузилось
     *
     * @param evt
     */
    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        FillPanel(CommanderPanel.LEFT);
        FillPanel(CommanderPanel.RIGHT);
    }//GEN-LAST:event_formWindowActivated

    /**
     * Клик мышкой поп панели
     *
     * @param panel Панель
     * @param clickCount Количество кликов
     */
    private void tableMouseClicked(CommanderPanel panel, int clickCount) {
        javax.swing.JTable table = jTable1;
        File folder = folderLeft;
        javax.swing.JLabel labelFile = jLabelLeftName;
        if (panel == CommanderPanel.RIGHT) {
            table = jTable2;
            folder = folderRight;
            labelFile = jLabelRightName;
        }
        if (table == null) {
            return;
        }
        // Номер выбранной строки таблицы
        int selectedRow = table.getSelectedRow();
        // Если в таблице не выбрана строка, то выход
        if (selectedRow < 0) {
            return;
        }
        // Имя и размер выбранного файла
        String name = (String) table.getValueAt(selectedRow, 0);
        String size = (String) table.getValueAt(selectedRow, 1);
        if (clickCount == 2)// Двойной клик
        {
            // Если выбрана папка
            if (size.equals("")) {
                if (name.equals("...")) {
                    folder = folder.getParentFile();
                } else {
                    if (folder == null) {
                        folder = new File(name);
                    } else {
                        folder = new File(folder.getAbsoluteFile()
                                + File.separator + name + File.separator);
                    }
                }
            }
            if (panel == CommanderPanel.RIGHT) {
                folderRight = folder;
            } else {
                folderLeft = folder;
            }
            // Заполнить панель
            FillPanel(panel);
        } else {
            labelFile.setText(name);
        }
    }

    /**
     * Клик по левой панели
     *
     * @param evt
     */
    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // Обработать выбор и вывести имя выбранного файла
        tableMouseClicked(CommanderPanel.LEFT, evt.getClickCount());
    }//GEN-LAST:event_jTable1MouseClicked

    /**
     * Клик по правой панели
     *
     * @param evt
     */
    private void jTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseClicked
        // Обработать выбор и вывести имя выбранного файла
        tableMouseClicked(CommanderPanel.RIGHT, evt.getClickCount());
    }//GEN-LAST:event_jTable2MouseClicked

    /**
     * Копирование файла
     *
     * @param source Копируемый файл
     * @param dest Новый файл
     * @throws IOException
     */
    private void copyFileUsingStream(File source, File dest) throws IOException {
        InputStream is = null;
        OutputStream os = null;
        try {
            // Открыть два потока для чтения и записи
            is = new FileInputStream(source);
            os = new FileOutputStream(dest);
            // Буфер чтения-записи
            byte[] buffer = new byte[1024];
            int length;
            // Цикл, пока не коней файла
            while ((length = is.read(buffer)) > 0) {
                os.write(buffer, 0, length);
            }
        } catch (IOException ex) {
            // Ошибка копирования
            JOptionPane.showMessageDialog(this,
                    "Ошибка копирования файла.\n" + ex.getLocalizedMessage(),
                    "Ошибка копирования",
                    JOptionPane.ERROR_MESSAGE);

        } finally {
            // Закрыть файлы
            is.close();
            os.close();
        }
    }

    /**
     * Копирование файла из одной панели в открытую папку в другой панели
     *
     * @param panelSource Панель, в которой выбран файл
     */
    private void copyFileFromPanel(CommanderPanel panelSource) {
        File folderDest = folderLeft;
        File folderSource = folderRight;
        javax.swing.JTable tableSource = jTable2;
        javax.swing.JLabel labelFileSource = jLabelRightName;
        if (panelSource == CommanderPanel.LEFT) {
            tableSource = jTable1;
            folderDest = folderRight;
            folderSource = folderLeft;
            labelFileSource = jLabelLeftName;
        }

        // Номер выбранной строки таблицы
        int selectedRow = tableSource.getSelectedRow();
        // Если строка выбрана
        if (selectedRow != -1) {
            // Имя и размер выбранного файла
            String name = (String) tableSource.getValueAt(selectedRow, 0);
            String size = (String) tableSource.getValueAt(selectedRow, 1);
            // Если выбран файл
            if (!size.equals("")) {
                // Если папка назначения не выбрана
                if (labelFileSource.getText().equals("")) {
                    JOptionPane.showMessageDialog(this,
                            "Не выбрана папка назначения.", "Ошибка",
                            JOptionPane.ERROR_MESSAGE);
                    return;
                }
                if(folderDest == null)
                {
                    JOptionPane.showMessageDialog(this,
                        "Не выбрана папка назначения, выберите папку назначения.", "Ошибка",
                        JOptionPane.ERROR_MESSAGE);
                    return;
                }
                // Копируемый файл
                File file = new File(folderSource.getAbsolutePath() + 
                        File.separator + name);
                
                // Новый файл
                File newFile = new File(folderDest.getAbsolutePath() + 
                        File.separator + name);
                // Окно с вопросом о копировании файла
                Object[] options = {"Да", "Нет"};
                int n;
                n = JOptionPane.showOptionDialog(this,
                        "Копировать " + name + "\n в папку "
                        + folderDest.getAbsolutePath() + " ?",
                        "Копирование", JOptionPane.OK_CANCEL_OPTION,
                        JOptionPane.QUESTION_MESSAGE, null,
                        options, options[1]);
                // Выбрано Да
                if (n == 0) {
                    try {
                        // Копирование файла
                        copyFileUsingStream(file, newFile);
                    } catch (IOException ex) {
                        // Ошибка копирования
                        JOptionPane.showMessageDialog(this,
                                "Ошибка копирования файла.\n" + 
                                        ex.getLocalizedMessage(),
                                "Ошибка копирования",
                                JOptionPane.ERROR_MESSAGE);
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this,
                        "Выбрана папка, выберите файл.", "Ошибка",
                        JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this,
                    "Не выбран файл.", "Ошибка",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Копирование файла из правой панели в открытую папку в левой панели
     *
     * @param evt
     */
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        copyFileFromPanel(CommanderPanel.RIGHT);
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * Копирование файла из левой панели в открытую папку в правой панели
     *
     * @param evt
     */
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        copyFileFromPanel(CommanderPanel.LEFT);
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * Меню Помощь
     *
     * @param evt
     */
    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        JOptionPane.showMessageDialog(this,
                "Приложение File Commander.\n"
                + "Приложение написано на языке Java в качестве курсового проекта.\n"
                + "Окно приложения разделено на две панели, в каждой из которых\n"
                + "выводится содержимое выбранной папки.\n"
                + "Двойным кликом по строке таблицы открывается выбранная папка\n"
                + "в текущей панели. Одиночным кликом выбирается файл.\n"
                + "В центре между панелями расположены две кнопки для\n"
                + "копирования выбранного файла из одной панели в открытую папку\n"
                + "в другой панели.\n"
                + "Приложение снабжено сопровождающими сообшениями.\n"
                + "",
                "Справка",
                JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabelLeftFolder;
    private javax.swing.JLabel jLabelLeftName;
    private javax.swing.JLabel jLabelRightFolder;
    private javax.swing.JLabel jLabelRightName;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanelLeft;
    private javax.swing.JPanel jPanelRight;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    // End of variables declaration//GEN-END:variables
}
